// Generated by gencpp from file eurobot2019_messages/pickup.msg
// DO NOT EDIT!


#ifndef EUROBOT2019_MESSAGES_MESSAGE_PICKUP_H
#define EUROBOT2019_MESSAGES_MESSAGE_PICKUP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace eurobot2019_messages
{
template <class ContainerAllocator>
struct pickup_
{
  typedef pickup_<ContainerAllocator> Type;

  pickup_()
    : is_vertical(false)
    , pos_reached(false)
    , colour(0)  {
    }
  pickup_(const ContainerAllocator& _alloc)
    : is_vertical(false)
    , pos_reached(false)
    , colour(0)  {
  (void)_alloc;
    }



   typedef uint8_t _is_vertical_type;
  _is_vertical_type is_vertical;

   typedef uint8_t _pos_reached_type;
  _pos_reached_type pos_reached;

   typedef uint8_t _colour_type;
  _colour_type colour;





  typedef boost::shared_ptr< ::eurobot2019_messages::pickup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eurobot2019_messages::pickup_<ContainerAllocator> const> ConstPtr;

}; // struct pickup_

typedef ::eurobot2019_messages::pickup_<std::allocator<void> > pickup;

typedef boost::shared_ptr< ::eurobot2019_messages::pickup > pickupPtr;
typedef boost::shared_ptr< ::eurobot2019_messages::pickup const> pickupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eurobot2019_messages::pickup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eurobot2019_messages::pickup_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace eurobot2019_messages

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'eurobot2019_messages': ['/home/nickick/Eurobot2019/src/eurobot2019_messages/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::eurobot2019_messages::pickup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eurobot2019_messages::pickup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eurobot2019_messages::pickup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eurobot2019_messages::pickup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eurobot2019_messages::pickup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eurobot2019_messages::pickup_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eurobot2019_messages::pickup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc43b8165e5ce088844c3951cd1006fd";
  }

  static const char* value(const ::eurobot2019_messages::pickup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc43b8165e5ce088ULL;
  static const uint64_t static_value2 = 0x844c3951cd1006fdULL;
};

template<class ContainerAllocator>
struct DataType< ::eurobot2019_messages::pickup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eurobot2019_messages/pickup";
  }

  static const char* value(const ::eurobot2019_messages::pickup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eurobot2019_messages::pickup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Is the target puck vertical?\n"
"bool is_vertical\n"
"\n"
"# Have we reached the correct position yet?\n"
"# Note that the picker will be told to open up and get to the right z\n"
"# Before continuing by setting this to false\n"
"bool pos_reached\n"
"\n"
"# 0 is \"idle at bottom front\"\n"
"# 1 is red\n"
"# 2 is green\n"
"# 3 is blue\n"
"# 4 is gold\n"
"# 5 is \"idle at top back\"\n"
"uint8 colour\n"
;
  }

  static const char* value(const ::eurobot2019_messages::pickup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eurobot2019_messages::pickup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_vertical);
      stream.next(m.pos_reached);
      stream.next(m.colour);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pickup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eurobot2019_messages::pickup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eurobot2019_messages::pickup_<ContainerAllocator>& v)
  {
    s << indent << "is_vertical: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_vertical);
    s << indent << "pos_reached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pos_reached);
    s << indent << "colour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.colour);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EUROBOT2019_MESSAGES_MESSAGE_PICKUP_H
