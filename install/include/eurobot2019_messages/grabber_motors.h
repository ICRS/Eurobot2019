// Generated by gencpp from file eurobot2019_messages/grabber_motors.msg
// DO NOT EDIT!


#ifndef EUROBOT2019_MESSAGES_MESSAGE_GRABBER_MOTORS_H
#define EUROBOT2019_MESSAGES_MESSAGE_GRABBER_MOTORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace eurobot2019_messages
{
template <class ContainerAllocator>
struct grabber_motors_
{
  typedef grabber_motors_<ContainerAllocator> Type;

  grabber_motors_()
    : z_pos_mm(0.0)
    , open_pos_mm(0.0)
    , z_twist_rad(0.0)
    , servo_state(false)  {
    }
  grabber_motors_(const ContainerAllocator& _alloc)
    : z_pos_mm(0.0)
    , open_pos_mm(0.0)
    , z_twist_rad(0.0)
    , servo_state(false)  {
  (void)_alloc;
    }



   typedef float _z_pos_mm_type;
  _z_pos_mm_type z_pos_mm;

   typedef float _open_pos_mm_type;
  _open_pos_mm_type open_pos_mm;

   typedef float _z_twist_rad_type;
  _z_twist_rad_type z_twist_rad;

   typedef uint8_t _servo_state_type;
  _servo_state_type servo_state;





  typedef boost::shared_ptr< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> const> ConstPtr;

}; // struct grabber_motors_

typedef ::eurobot2019_messages::grabber_motors_<std::allocator<void> > grabber_motors;

typedef boost::shared_ptr< ::eurobot2019_messages::grabber_motors > grabber_motorsPtr;
typedef boost::shared_ptr< ::eurobot2019_messages::grabber_motors const> grabber_motorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eurobot2019_messages::grabber_motors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace eurobot2019_messages

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'eurobot2019_messages': ['/home/nickick/Eurobot2019/src/eurobot2019_messages/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1cacf4e8a711d50ed3a69eafde8b2ff7";
  }

  static const char* value(const ::eurobot2019_messages::grabber_motors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1cacf4e8a711d50eULL;
  static const uint64_t static_value2 = 0xd3a69eafde8b2ff7ULL;
};

template<class ContainerAllocator>
struct DataType< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eurobot2019_messages/grabber_motors";
  }

  static const char* value(const ::eurobot2019_messages::grabber_motors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 z_pos_mm\n"
"float32 open_pos_mm\n"
"float32 z_twist_rad\n"
"bool servo_state\n"
;
  }

  static const char* value(const ::eurobot2019_messages::grabber_motors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.z_pos_mm);
      stream.next(m.open_pos_mm);
      stream.next(m.z_twist_rad);
      stream.next(m.servo_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct grabber_motors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eurobot2019_messages::grabber_motors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eurobot2019_messages::grabber_motors_<ContainerAllocator>& v)
  {
    s << indent << "z_pos_mm: ";
    Printer<float>::stream(s, indent + "  ", v.z_pos_mm);
    s << indent << "open_pos_mm: ";
    Printer<float>::stream(s, indent + "  ", v.open_pos_mm);
    s << indent << "z_twist_rad: ";
    Printer<float>::stream(s, indent + "  ", v.z_twist_rad);
    s << indent << "servo_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.servo_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EUROBOT2019_MESSAGES_MESSAGE_GRABBER_MOTORS_H
