// Generated by gencpp from file eurobot2019_messages/drop_motors.msg
// DO NOT EDIT!


#ifndef EUROBOT2019_MESSAGES_MESSAGE_DROP_MOTORS_H
#define EUROBOT2019_MESSAGES_MESSAGE_DROP_MOTORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace eurobot2019_messages
{
template <class ContainerAllocator>
struct drop_motors_
{
  typedef drop_motors_<ContainerAllocator> Type;

  drop_motors_()
    : left_z(0.0)
    , left_x(0.0)
    , middle_z(0.0)
    , middle_x(0.0)
    , right_z(0.0)
    , right_x(0.0)  {
    }
  drop_motors_(const ContainerAllocator& _alloc)
    : left_z(0.0)
    , left_x(0.0)
    , middle_z(0.0)
    , middle_x(0.0)
    , right_z(0.0)
    , right_x(0.0)  {
  (void)_alloc;
    }



   typedef float _left_z_type;
  _left_z_type left_z;

   typedef float _left_x_type;
  _left_x_type left_x;

   typedef float _middle_z_type;
  _middle_z_type middle_z;

   typedef float _middle_x_type;
  _middle_x_type middle_x;

   typedef float _right_z_type;
  _right_z_type right_z;

   typedef float _right_x_type;
  _right_x_type right_x;





  typedef boost::shared_ptr< ::eurobot2019_messages::drop_motors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eurobot2019_messages::drop_motors_<ContainerAllocator> const> ConstPtr;

}; // struct drop_motors_

typedef ::eurobot2019_messages::drop_motors_<std::allocator<void> > drop_motors;

typedef boost::shared_ptr< ::eurobot2019_messages::drop_motors > drop_motorsPtr;
typedef boost::shared_ptr< ::eurobot2019_messages::drop_motors const> drop_motorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eurobot2019_messages::drop_motors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eurobot2019_messages::drop_motors_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace eurobot2019_messages

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'eurobot2019_messages': ['/home/nickick/Eurobot2019/src/eurobot2019_messages/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::eurobot2019_messages::drop_motors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eurobot2019_messages::drop_motors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eurobot2019_messages::drop_motors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eurobot2019_messages::drop_motors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eurobot2019_messages::drop_motors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eurobot2019_messages::drop_motors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eurobot2019_messages::drop_motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da232c9309df34c64bd87bc76c440433";
  }

  static const char* value(const ::eurobot2019_messages::drop_motors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda232c9309df34c6ULL;
  static const uint64_t static_value2 = 0x4bd87bc76c440433ULL;
};

template<class ContainerAllocator>
struct DataType< ::eurobot2019_messages::drop_motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eurobot2019_messages/drop_motors";
  }

  static const char* value(const ::eurobot2019_messages::drop_motors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eurobot2019_messages::drop_motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The z position of the left stepper motor\n"
"float32 left_z\n"
"# The x position of the left pusher\n"
"float32 left_x\n"
"# The z position of the middle stepper motor\n"
"float32 middle_z\n"
"# The x position of the middle pusher\n"
"float32 middle_x\n"
"# The z position of the right stepper motor\n"
"float32 right_z\n"
"# The x position of the right pusher\n"
"float32 right_x\n"
;
  }

  static const char* value(const ::eurobot2019_messages::drop_motors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eurobot2019_messages::drop_motors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_z);
      stream.next(m.left_x);
      stream.next(m.middle_z);
      stream.next(m.middle_x);
      stream.next(m.right_z);
      stream.next(m.right_x);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct drop_motors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eurobot2019_messages::drop_motors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eurobot2019_messages::drop_motors_<ContainerAllocator>& v)
  {
    s << indent << "left_z: ";
    Printer<float>::stream(s, indent + "  ", v.left_z);
    s << indent << "left_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_x);
    s << indent << "middle_z: ";
    Printer<float>::stream(s, indent + "  ", v.middle_z);
    s << indent << "middle_x: ";
    Printer<float>::stream(s, indent + "  ", v.middle_x);
    s << indent << "right_z: ";
    Printer<float>::stream(s, indent + "  ", v.right_z);
    s << indent << "right_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_x);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EUROBOT2019_MESSAGES_MESSAGE_DROP_MOTORS_H
