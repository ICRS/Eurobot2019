# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from eurobot2019_messages/grabber_motors.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class grabber_motors(genpy.Message):
  _md5sum = "1cacf4e8a711d50ed3a69eafde8b2ff7"
  _type = "eurobot2019_messages/grabber_motors"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 z_pos_mm
float32 open_pos_mm
float32 z_twist_rad
bool servo_state
"""
  __slots__ = ['z_pos_mm','open_pos_mm','z_twist_rad','servo_state']
  _slot_types = ['float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       z_pos_mm,open_pos_mm,z_twist_rad,servo_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(grabber_motors, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.z_pos_mm is None:
        self.z_pos_mm = 0.
      if self.open_pos_mm is None:
        self.open_pos_mm = 0.
      if self.z_twist_rad is None:
        self.z_twist_rad = 0.
      if self.servo_state is None:
        self.servo_state = False
    else:
      self.z_pos_mm = 0.
      self.open_pos_mm = 0.
      self.z_twist_rad = 0.
      self.servo_state = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3fB().pack(_x.z_pos_mm, _x.open_pos_mm, _x.z_twist_rad, _x.servo_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.z_pos_mm, _x.open_pos_mm, _x.z_twist_rad, _x.servo_state,) = _get_struct_3fB().unpack(str[start:end])
      self.servo_state = bool(self.servo_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3fB().pack(_x.z_pos_mm, _x.open_pos_mm, _x.z_twist_rad, _x.servo_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.z_pos_mm, _x.open_pos_mm, _x.z_twist_rad, _x.servo_state,) = _get_struct_3fB().unpack(str[start:end])
      self.servo_state = bool(self.servo_state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3fB = None
def _get_struct_3fB():
    global _struct_3fB
    if _struct_3fB is None:
        _struct_3fB = struct.Struct("<3fB")
    return _struct_3fB
